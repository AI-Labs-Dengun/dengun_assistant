const nodemailer = require('nodemailer');
const cors = require('cors')({ origin: true });

/**
 * Cloud Function to send emails with user information and chat history
 * 
 * @param {Object} req - The request object
 * @param {Object} res - The response object
 */
exports.sendEmail = (req, res) => {
  // Set CORS headers for preflight requests
  // Allows GETs from any origin with the Content-Type header
  // and caches preflight response for 3600s
  
  res.set('Access-Control-Allow-Origin', '*');
  
  if (req.method === 'OPTIONS') {
    // Send response to OPTIONS requests
    res.set('Access-Control-Allow-Methods', 'GET, POST');
    res.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
    res.set('Access-Control-Max-Age', '3600');
    res.status(204).send('');
    return;
  }
  
  // Handle CORS preflight requests
  return cors(req, res, async () => {
    try {
      // Only allow POST method
      if (req.method !== 'POST') {
        return res.status(405).send({ error: 'Method not allowed. Only POST is supported.' });
      }

      // Get request data
      const { to, subject, content, userName, userEmail, userPhone } = req.body;

      // Validate request data
      if (!to || !subject || !content) {
        return res.status(400).send({ error: 'Missing required parameters: to, subject, or content' });
      }

      // Configure nodemailer transporter
      // Note: In production, use environment variables for these credentials
      const transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST || 'smtp.gmail.com',
        port: parseInt(process.env.SMTP_PORT || '587', 10),
        secure: process.env.SMTP_SECURE === 'true',
        auth: {
          user: process.env.SMTP_USER || 'ai@dengun.com',
          pass: process.env.SMTP_PASS || 'hrnpphkmdsftwpbz'
        }
      });

      // Log transporter configuration (in non-production environments only)
      if (process.env.NODE_ENV !== 'production') {
        console.log('Email configuration:', {
          host: process.env.SMTP_HOST || 'smtp.gmail.com',
          port: parseInt(process.env.SMTP_PORT || '587', 10),
          secure: process.env.SMTP_SECURE === 'true',
          user: process.env.SMTP_USER || 'ai@dengun.com'
        });
      }

      // Set up email data
      const mailOptions = {
        from: process.env.EMAIL_FROM || 'Dengun Assistant <noreply@dengun.com>',
        to,
        subject,
        text: content,
        html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #4a4a4a;">New Contact Information from Chat</h2>
          
          <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px;">
            <h3 style="color: #2c3e50; margin-top: 0;">User Details</h3>
            <p><strong>Name:</strong> ${userName || 'Not provided'}</p>
            <p><strong>Email:</strong> ${userEmail || 'Not provided'}</p>
            <p><strong>Phone:</strong> ${userPhone || 'Not provided'}</p>
          </div>
          
          <div>
            <h3 style="color: #2c3e50;">Conversation History</h3>
            <div style="white-space: pre-line;">${content}</div>
          </div>
          
          <p style="margin-top: 30px; font-size: 12px; color: #7f8c8d;">
            This email was automatically generated by Dengun Assistant.
          </p>
        </div>
        `
      };

      // Send the email
      const info = await transporter.sendMail(mailOptions);
      console.log('Email sent:', info.messageId);

      return res.status(200).send({ success: true, messageId: info.messageId });
    } catch (error) {
      console.error('Error sending email:', error);
      return res.status(500).send({ error: 'Failed to send email', details: error.message });
    }
  });
}; 